Praktikum Pemrograman Aplikasi Web
Aplikasi Manajemen Tugas Mahasiswa

Nama: Aryasatya Widyatna Akbar
NIM: 123140164

Deskripsi Aplikasi
Aplikasi Manajemen Tugas Mahasiswa adalah aplikasi web interaktif yang dirancang khusus untuk membantu mahasiswa mengelola tugas-tugas akademik mereka secara efektif dan efisien. Aplikasi ini menyediakan antarmuka yang user-friendly dengan fitur lengkap untuk menambah, mengedit, menghapus, dan memfilter tugas kuliah.

Fitur-Fitur Utama
1. List Tugas

Tambah Tugas: Menambahkan tugas baru dengan informasi lengkap
List: Menampilkan daftar semua tugas dengan detail
Edit: Mengedit informasi tugas yang sudah ada
Hapus: Menghapus tugas yang tidak diperlukan

2. Penyimpanan Data Lokal

Data tersimpan secara permanen menggunakan localStorage
Data tetap ada meskipun browser ditutup
Otomatis memuat data saat aplikasi dibuka kembali

3. Validasi Form

Nama tugas tidak boleh kosong
Mata kuliah harus dipilih
Deadline harus diisi
Deadline tidak boleh tanggal yang sudah lewat

4. Filter & Pencarian

Pencarian: Cari tugas berdasarkan nama atau mata kuliah
Filter Status: Tampilkan semua, selesai, atau belum selesai
Filter Mata Kuliah: Filter berdasarkan mata kuliah tertentu

5. Statistik dan Monitoring

Total jumlah tugas
Jumlah tugas yang sudah selesai
Jumlah tugas yang belum selesai
Indikator deadline yang mendekat (3 hari)

6. Status Tugas

Tombol untuk menandai tugas selesai/belum selesai
Visual strikethrough untuk tugas yang sudah selesai
Badge warna untuk status deadline


Cara Menjalankan Aplikasi

- Menambah Tugas Baru
- Klik tombol "Tambah Tugas" di pojok kanan atas, lalu si form 
Nama Tugas: Contoh "Membuat Laporan Praktikum"
Mata Kuliah: Pilih dari dropdown
Deadline: Pilih tanggal dari date picker
- Klik "Simpan Tugas", tugas akan muncul di daftar
- Jika tugas sudah selesai tandai tugas
- Klik icon checkbox (‚≠ï) di sebelah kiri tugas
Icon akan berubah menjadi ‚úÖ, Nama tugas akan ter-strikethrough dab background berubah menjadi abu-abu
- Mengedit Tugas jika ingin, Klik tombol Edit (‚úèÔ∏è) pada tugas yang ingin diedit
- Form akan muncul dengan data tugas yang sudah terisi
- Ubah informasi yang diperlukan, lalu klik "Update Tugas"
- Menghapus tugas jika ingin, klik tombol Delete (üóëÔ∏è) pada tugas
- Konfirmasi penghapusan akan muncul
- Klik OK untuk menghapus atau batal
- Mencari tugas, ketik kata kunci di kolom pencarian
- Hasil akan difilter secara real-time
- Pencarian mencakup nama tugas dan mata kuliah
- Memfilter tugas, filter Status: Pilih "Semua Status", "Belum Selesai", atau "Selesai"
Filter Mata Kuliah: Pilih mata kuliah tertentu atau "Semua Mata Kuliah"

Screenshot Aplikasi

1. Dashboard
Menampilkan:
- Header dengan judul aplikasi
- Tombol "Tambah Tugas"
- Statistik (Total, Selesai, Belum Selesai)
- Filter & pencarian
- Hapus tugas
- Daftar tugas
- Warning badge merah untuk deadline dekat
- Pesan peringatan "Deadline segera!"
- Highlighting visual untuk tugas urgent

2. Form
Menampilkan:
- Modal form yang overlay
- Input nama tugas
- Dropdown mata kuliah
- Date picker untuk deadline
- Validasi error messages
- Tombol Simpan dan Batal

3. Filter Tugas 
Menampilkan:
- Tugas yang difilter berdasarkan status
- Pencarian aktif
- Badge mata kuliah dan deadline
- Tombol aksi (Edit, Delete)
- Checkbox status penyelesaian


Teknologi yang Digunakan
Frontend

HTML5: Struktur aplikasi
Tailwind CSS: Styling dan desain UI
Vanilla JavaScript: Logika aplikasi dan interaktivitas

Storage

localStorage API: Penyimpanan data permanen di browser

Design Patterns

Responsive Design: Tampilan optimal di semua device
Mobile-First Approach: Prioritas pengalaman mobile
Component-Based Structure: Organisasi kode yang modular


Penjelasan Teknis
1. Implementasi localStorage
Menyimpan Data
// Simpan tugas ke localStorage
function simpanKeStorage() {
    localStorage.setItem('daftarTugas', JSON.stringify(daftarTugas));
}

Menggunakan localStorage.setItem() untuk menyimpan data
Data array dikonversi ke JSON string dengan JSON.stringify()
Otomatis dipanggil setiap ada perubahan data

Memuat Data
// Muat tugas dari localStorage 
function muatTugas() {
    const tugasTersimpan = localStorage.getItem('daftarTugas');
    if (tugasTersimpan) {
        daftarTugas = JSON.parse(tugasTersimpan);
    }
    tampilkanTugas();
    perbaruiStatistik();
    perbaruiFilterMataKuliah();
}

Menggunakan localStorage.getItem() untuk mengambil data
JSON string diparse kembali ke array dengan JSON.parse()
Dipanggil saat aplikasi pertama kali dimuat
Melakukan pengecekan apakah data ada

2. Validasi Form
// Validasi form
function validasiForm() {
    hapusError();
    let valid = true;

    const nama = document.getElementById('namaTugas').value.trim();
    const mataKuliah = document.getElementById('mataKuliahTugas').value;
    const deadline = document.getElementById('deadlineTugas').value;

    if (!nama) {
        document.getElementById('errorNama').classList.remove('hidden');
        document.getElementById('namaTugas').classList.add('border-red-500');
        valid = false;
    }

    if (!mataKuliah) {
        document.getElementById('errorMataKuliah').classList.remove('hidden');
        document.getElementById('mataKuliahTugas').classList.add('border-red-500');
        valid = false;
    }

    if (!deadline) {
        document.getElementById('errorDeadline').classList.remove('hidden');
        document.getElementById('deadlineTugas').classList.add('border-red-500');
        valid = false;
    } else {
        const tanggalDipilih = new Date(deadline);
        const hariIni = new Date();
        hariIni.setHours(0, 0, 0, 0);
        
        if (tanggalDipilih < hariIni) {
            document.getElementById('errorDeadline').classList.remove('hidden');
            document.getElementById('deadlineTugas').classList.add('border-red-500');
            valid = false;
        }
    }

    return valid;
}

Real-time feedback dengan border merah
Pesan error yang spesifik dan jelas
Icon warning untuk visual cue
Mencegah submit jika ada error
Clear error saat form dibuka kembali

3. Filter dan Pencarian
// Filter tugas
function dapatkanTugasTerfilter() {
    const kataKunci = document.getElementById('inputPencarian').value.toLowerCase();
    const filterStatus = document.getElementById('filterStatus').value;
    const filterMataKuliah = document.getElementById('filterMataKuliah').value;

    return daftarTugas.filter(tugas => {
        const cocokPencarian = tugas.nama.toLowerCase().includes(kataKunci) ||
                              tugas.mataKuliah.toLowerCase().includes(kataKunci);
        const cocokStatus = filterStatus === 'semua' || 
                           (filterStatus === 'selesai' && tugas.selesai) ||
                           (filterStatus === 'belumSelesai' && !tugas.selesai);
        const cocokMataKuliah = filterMataKuliah === 'semua' || tugas.mataKuliah === filterMataKuliah;
        
        return cocokPencarian && cocokStatus && cocokMataKuliah;
    });
}
Cara Kerja:

Mengambil nilai dari input pencarian dan dropdown filter
Menggunakan Array.filter() untuk menyaring tugas
Kombinasi AND logic untuk semua filter
Case-insensitive search dengan toLowerCase()
Real-time filtering dengan event listener

4. Deteksi Deadline Mendekat
function deadlineDekat(stringTanggal) {
    const deadline = new Date(stringTanggal);
    const hariIni = new Date();
    const selisihWaktu = deadline - hariIni;
    const selisihHari = Math.ceil(selisihWaktu / (1000 * 60 * 60 * 24));
    return selisihHari <= 3 && selisihHari >= 0;
}

Cara Kerja:

Menghitung selisih hari antara deadline dan hari ini
Threshold: 3 hari atau kurang
Menampilkan warning badge merah
Pesan peringatan untuk tugas urgent

5. Update Real-time
function deadlineDekat(stringTanggal) {
    const deadline = new Date(stringTanggal);
    const hariIni = new Date();
    const selisihWaktu = deadline - hariIni;
    const selisihHari = Math.ceil(selisihWaktu / (1000 * 60 * 60 * 24));
    return selisihHari <= 3 && selisihHari >= 0;
}
Dipanggil setiap:

Menambah tugas baru
Mengedit tugas
Menghapus tugas
Toggle status penyelesaian


Daftar Fitur yang Diimplementasikan

1.  Menambahkan tugas baru dengan nama, mata kuliah, dan deadline
2. Menandai tugas sebagai selesai/belum selesai
3. Menghapus tugas
4. Filter berdasarkan status (selesai/belum selesai)
5. Filter berdasarkan mata kuliah
6. Pencarian tugas
7. Menampilkan jumlah tugas yang belum selesai
8. Validasi form lengkap
9. localStorage untuk penyimpanan data
10. Edit/update tugas yang sudah ada

Penjelasan Teknis:

Data tersimpan per browser (tidak sync antar device)
Maximum storage: ~5-10MB (tergantung browser)
Tidak ada backup otomatis ke cloud



